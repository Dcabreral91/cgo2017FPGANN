//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Wed May 10 14:54:36 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @main.Input = private unnamed_addr constant [34880 x double] [double 1.000000e+00, double 1.300000e+01, double 1.980000e+03, double 1.400000e+01, double 1.000000e+00, double 0.000000e+00, double 0.000...
`define TAG_g_mainInput `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_mainInput_a {`TAG_g_mainInput, 23'd0}
// @main.Output = private unnamed_addr constant [4360 x double] [double 1.197540e+00, double 1.853060e+00, double 1.344462e+00, double 1.433213e+00, double 1.568125e+00, double 1.699891e+00, double 1.702...
`define TAG_g_mainOutput `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_mainOutput_a {`TAG_g_mainOutput, 23'd0}
// @main.testInput = private unnamed_addr constant [512 x double] [double 1.000000e+00, double 1.300000e+01, double 1.980000e+03, double 1.400000e+01, double 1.000000e+00, double 0.000000e+00, double 0.0...
`define TAG_g_maintestInput `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_maintestInput_a {`TAG_g_maintestInput, 23'd0}
// @main.testOutput = private unnamed_addr constant [64 x double] [double 1.197540e+00, double 1.853060e+00, double 1.344462e+00, double 1.433213e+00, double 1.568125e+00, double 1.699891e+00, double 1.7...
`define TAG_g_maintestOutput `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_maintestOutput_a {`TAG_g_maintestOutput, 23'd0}
//   %Input = alloca [34880 x double], align 8
`define TAG_main_0_Input `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_main_0_Input_a {`TAG_main_0_Input, 23'd0}
//   %Output = alloca [4360 x double], align 8
`define TAG_main_0_Output `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_main_0_Output_a {`TAG_main_0_Output, 23'd0}
//   %testInput = alloca [512 x double], align 8
`define TAG_main_0_testInput `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_main_0_testInput_a {`TAG_main_0_testInput, 23'd0}
//   %testOutput = alloca [64 x double], align 8
`define TAG_main_0_testOutput `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_main_0_testOutput_a {`TAG_main_0_testOutput, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [15:0] mainInput_address_a;
reg [15:0] mainInput_address_b;
reg mainInput_write_enable_a;
reg mainInput_write_enable_b;
reg [63:0] mainInput_in_a;
reg [63:0] mainInput_in_b;
wire [63:0] mainInput_out_a;
wire [63:0] mainInput_out_b;

// @main.Input = private unnamed_addr constant [34880 x double] [double 1.000000e+00, double 1.300000e+01, double 1.980000e+03, double 1.400000e+01, double 1.000000e+00, double 0.000000e+00, double 0.000...
rom_dual_port mainInput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( mainInput_address_a ),
	.address_b( mainInput_address_b ),
	.q_a( mainInput_out_a ),
	.q_b( mainInput_out_b)
);
defparam mainInput.width_a = 64;
defparam mainInput.width_b = 64;
defparam mainInput.widthad_a = 16;
defparam mainInput.widthad_b = 16;
defparam mainInput.numwords_a = 34880;
defparam mainInput.numwords_b = 34880;
defparam mainInput.latency = ram_latency;
defparam mainInput.init_file = "mainInput.mif";

reg [12:0] mainOutput_address_a;
reg [12:0] mainOutput_address_b;
reg mainOutput_write_enable_a;
reg mainOutput_write_enable_b;
reg [63:0] mainOutput_in_a;
reg [63:0] mainOutput_in_b;
wire [63:0] mainOutput_out_a;
wire [63:0] mainOutput_out_b;

// @main.Output = private unnamed_addr constant [4360 x double] [double 1.197540e+00, double 1.853060e+00, double 1.344462e+00, double 1.433213e+00, double 1.568125e+00, double 1.699891e+00, double 1.702...
rom_dual_port mainOutput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( mainOutput_address_a ),
	.address_b( mainOutput_address_b ),
	.q_a( mainOutput_out_a ),
	.q_b( mainOutput_out_b)
);
defparam mainOutput.width_a = 64;
defparam mainOutput.width_b = 64;
defparam mainOutput.widthad_a = 13;
defparam mainOutput.widthad_b = 13;
defparam mainOutput.numwords_a = 4360;
defparam mainOutput.numwords_b = 4360;
defparam mainOutput.latency = ram_latency;
defparam mainOutput.init_file = "mainOutput.mif";

reg [8:0] maintestInput_address_a;
reg [8:0] maintestInput_address_b;
reg maintestInput_write_enable_a;
reg maintestInput_write_enable_b;
reg [63:0] maintestInput_in_a;
reg [63:0] maintestInput_in_b;
wire [63:0] maintestInput_out_a;
wire [63:0] maintestInput_out_b;

// @main.testInput = private unnamed_addr constant [512 x double] [double 1.000000e+00, double 1.300000e+01, double 1.980000e+03, double 1.400000e+01, double 1.000000e+00, double 0.000000e+00, double 0.0...
rom_dual_port maintestInput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( maintestInput_address_a ),
	.address_b( maintestInput_address_b ),
	.q_a( maintestInput_out_a ),
	.q_b( maintestInput_out_b)
);
defparam maintestInput.width_a = 64;
defparam maintestInput.width_b = 64;
defparam maintestInput.widthad_a = 9;
defparam maintestInput.widthad_b = 9;
defparam maintestInput.numwords_a = 512;
defparam maintestInput.numwords_b = 512;
defparam maintestInput.latency = ram_latency;
defparam maintestInput.init_file = "maintestInput.mif";

reg [5:0] maintestOutput_address_a;
reg [5:0] maintestOutput_address_b;
reg maintestOutput_write_enable_a;
reg maintestOutput_write_enable_b;
reg [63:0] maintestOutput_in_a;
reg [63:0] maintestOutput_in_b;
wire [63:0] maintestOutput_out_a;
wire [63:0] maintestOutput_out_b;

// @main.testOutput = private unnamed_addr constant [64 x double] [double 1.197540e+00, double 1.853060e+00, double 1.344462e+00, double 1.433213e+00, double 1.568125e+00, double 1.699891e+00, double 1.7...
rom_dual_port maintestOutput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( maintestOutput_address_a ),
	.address_b( maintestOutput_address_b ),
	.q_a( maintestOutput_out_a ),
	.q_b( maintestOutput_out_b)
);
defparam maintestOutput.width_a = 64;
defparam maintestOutput.width_b = 64;
defparam maintestOutput.widthad_a = 6;
defparam maintestOutput.widthad_b = 6;
defparam maintestOutput.numwords_a = 64;
defparam maintestOutput.numwords_b = 64;
defparam maintestOutput.latency = ram_latency;
defparam maintestOutput.init_file = "maintestOutput.mif";

reg [15:0] main_0_Input_address_a;
reg [15:0] main_0_Input_address_b;
reg main_0_Input_write_enable_a;
reg main_0_Input_write_enable_b;
reg [63:0] main_0_Input_in_a;
reg [63:0] main_0_Input_in_b;
wire [63:0] main_0_Input_out_a;
wire [63:0] main_0_Input_out_b;

//   %Input = alloca [34880 x double], align 8
ram_dual_port main_0_Input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Input_address_a ),
	.address_b( main_0_Input_address_b ),
	.wren_a( main_0_Input_write_enable_a ),
	.wren_b( main_0_Input_write_enable_b ),
	.data_a( main_0_Input_in_a ),
	.data_b( main_0_Input_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Input_out_a ),
	.q_b( main_0_Input_out_b)
);
defparam main_0_Input.width_a = 64;
defparam main_0_Input.width_b = 64;
defparam main_0_Input.widthad_a = 16;
defparam main_0_Input.widthad_b = 16;
defparam main_0_Input.width_be_a = 1;
defparam main_0_Input.width_be_b = 1;
defparam main_0_Input.numwords_a = 34880;
defparam main_0_Input.numwords_b = 34880;
defparam main_0_Input.latency = ram_latency;

reg [12:0] main_0_Output_address_a;
reg [12:0] main_0_Output_address_b;
reg main_0_Output_write_enable_a;
reg main_0_Output_write_enable_b;
reg [63:0] main_0_Output_in_a;
reg [63:0] main_0_Output_in_b;
wire [63:0] main_0_Output_out_a;
wire [63:0] main_0_Output_out_b;

//   %Output = alloca [4360 x double], align 8
ram_dual_port main_0_Output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Output_address_a ),
	.address_b( main_0_Output_address_b ),
	.wren_a( main_0_Output_write_enable_a ),
	.wren_b( main_0_Output_write_enable_b ),
	.data_a( main_0_Output_in_a ),
	.data_b( main_0_Output_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Output_out_a ),
	.q_b( main_0_Output_out_b)
);
defparam main_0_Output.width_a = 64;
defparam main_0_Output.width_b = 64;
defparam main_0_Output.widthad_a = 13;
defparam main_0_Output.widthad_b = 13;
defparam main_0_Output.width_be_a = 1;
defparam main_0_Output.width_be_b = 1;
defparam main_0_Output.numwords_a = 4360;
defparam main_0_Output.numwords_b = 4360;
defparam main_0_Output.latency = ram_latency;

reg [8:0] main_0_testInput_address_a;
reg [8:0] main_0_testInput_address_b;
reg main_0_testInput_write_enable_a;
reg main_0_testInput_write_enable_b;
reg [63:0] main_0_testInput_in_a;
reg [63:0] main_0_testInput_in_b;
wire [63:0] main_0_testInput_out_a;
wire [63:0] main_0_testInput_out_b;

//   %testInput = alloca [512 x double], align 8
ram_dual_port main_0_testInput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_testInput_address_a ),
	.address_b( main_0_testInput_address_b ),
	.wren_a( main_0_testInput_write_enable_a ),
	.wren_b( main_0_testInput_write_enable_b ),
	.data_a( main_0_testInput_in_a ),
	.data_b( main_0_testInput_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_testInput_out_a ),
	.q_b( main_0_testInput_out_b)
);
defparam main_0_testInput.width_a = 64;
defparam main_0_testInput.width_b = 64;
defparam main_0_testInput.widthad_a = 9;
defparam main_0_testInput.widthad_b = 9;
defparam main_0_testInput.width_be_a = 1;
defparam main_0_testInput.width_be_b = 1;
defparam main_0_testInput.numwords_a = 512;
defparam main_0_testInput.numwords_b = 512;
defparam main_0_testInput.latency = ram_latency;

reg [5:0] main_0_testOutput_address_a;
reg [5:0] main_0_testOutput_address_b;
reg main_0_testOutput_write_enable_a;
reg main_0_testOutput_write_enable_b;
reg [63:0] main_0_testOutput_in_a;
reg [63:0] main_0_testOutput_in_b;
wire [63:0] main_0_testOutput_out_a;
wire [63:0] main_0_testOutput_out_b;

//   %testOutput = alloca [64 x double], align 8
ram_dual_port main_0_testOutput (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_testOutput_address_a ),
	.address_b( main_0_testOutput_address_b ),
	.wren_a( main_0_testOutput_write_enable_a ),
	.wren_b( main_0_testOutput_write_enable_b ),
	.data_a( main_0_testOutput_in_a ),
	.data_b( main_0_testOutput_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_testOutput_out_a ),
	.q_b( main_0_testOutput_out_b)
);
defparam main_0_testOutput.width_a = 64;
defparam main_0_testOutput.width_b = 64;
defparam main_0_testOutput.widthad_a = 6;
defparam main_0_testOutput.widthad_b = 6;
defparam main_0_testOutput.width_be_a = 1;
defparam main_0_testOutput.width_be_b = 1;
defparam main_0_testOutput.numwords_a = 64;
defparam main_0_testOutput.numwords_b = 64;
defparam main_0_testOutput.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_mainInput_a;
assign select_mainInput_a = (tag_a == `TAG_g_mainInput);
reg [ram_latency:0] select_mainInput_reg_a;
wire [63:0] memory_controller_mainInput_out_a;
assign memory_controller_mainInput_out_a = {64{ select_mainInput_reg_a[ram_latency]}} & mainInput_out_a;

wire select_mainOutput_a;
assign select_mainOutput_a = (tag_a == `TAG_g_mainOutput);
reg [ram_latency:0] select_mainOutput_reg_a;
wire [63:0] memory_controller_mainOutput_out_a;
assign memory_controller_mainOutput_out_a = {64{ select_mainOutput_reg_a[ram_latency]}} & mainOutput_out_a;

wire select_maintestInput_a;
assign select_maintestInput_a = (tag_a == `TAG_g_maintestInput);
reg [ram_latency:0] select_maintestInput_reg_a;
wire [63:0] memory_controller_maintestInput_out_a;
assign memory_controller_maintestInput_out_a = {64{ select_maintestInput_reg_a[ram_latency]}} & maintestInput_out_a;

wire select_maintestOutput_a;
assign select_maintestOutput_a = (tag_a == `TAG_g_maintestOutput);
reg [ram_latency:0] select_maintestOutput_reg_a;
wire [63:0] memory_controller_maintestOutput_out_a;
assign memory_controller_maintestOutput_out_a = {64{ select_maintestOutput_reg_a[ram_latency]}} & maintestOutput_out_a;

wire select_main_0_Input_a;
assign select_main_0_Input_a = (tag_a == `TAG_main_0_Input);
reg [ram_latency:0] select_main_0_Input_reg_a;
wire [63:0] memory_controller_main_0_Input_out_a;
assign memory_controller_main_0_Input_out_a = {64{ select_main_0_Input_reg_a[ram_latency]}} & main_0_Input_out_a;

wire select_main_0_Output_a;
assign select_main_0_Output_a = (tag_a == `TAG_main_0_Output);
reg [ram_latency:0] select_main_0_Output_reg_a;
wire [63:0] memory_controller_main_0_Output_out_a;
assign memory_controller_main_0_Output_out_a = {64{ select_main_0_Output_reg_a[ram_latency]}} & main_0_Output_out_a;

wire select_main_0_testInput_a;
assign select_main_0_testInput_a = (tag_a == `TAG_main_0_testInput);
reg [ram_latency:0] select_main_0_testInput_reg_a;
wire [63:0] memory_controller_main_0_testInput_out_a;
assign memory_controller_main_0_testInput_out_a = {64{ select_main_0_testInput_reg_a[ram_latency]}} & main_0_testInput_out_a;

wire select_main_0_testOutput_a;
assign select_main_0_testOutput_a = (tag_a == `TAG_main_0_testOutput);
reg [ram_latency:0] select_main_0_testOutput_reg_a;
wire [63:0] memory_controller_main_0_testOutput_out_a;
assign memory_controller_main_0_testOutput_out_a = {64{ select_main_0_testOutput_reg_a[ram_latency]}} & main_0_testOutput_out_a;

always @(*)
begin
	mainInput_address_a = memory_controller_address_a [16-1+3:3] & {16{select_mainInput_a}};
	mainInput_write_enable_a = memory_controller_write_enable_a & select_mainInput_a;
	mainInput_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	mainOutput_address_a = memory_controller_address_a [13-1+3:3] & {13{select_mainOutput_a}};
	mainOutput_write_enable_a = memory_controller_write_enable_a & select_mainOutput_a;
	mainOutput_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	maintestInput_address_a = memory_controller_address_a [9-1+3:3] & {9{select_maintestInput_a}};
	maintestInput_write_enable_a = memory_controller_write_enable_a & select_maintestInput_a;
	maintestInput_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	maintestOutput_address_a = memory_controller_address_a [6-1+3:3] & {6{select_maintestOutput_a}};
	maintestOutput_write_enable_a = memory_controller_write_enable_a & select_maintestOutput_a;
	maintestOutput_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	main_0_Input_address_a = memory_controller_address_a [16-1+3:3] & {16{select_main_0_Input_a}};
	main_0_Input_write_enable_a = memory_controller_write_enable_a & select_main_0_Input_a;
	main_0_Input_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	main_0_Output_address_a = memory_controller_address_a [13-1+3:3] & {13{select_main_0_Output_a}};
	main_0_Output_write_enable_a = memory_controller_write_enable_a & select_main_0_Output_a;
	main_0_Output_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	main_0_testInput_address_a = memory_controller_address_a [9-1+3:3] & {9{select_main_0_testInput_a}};
	main_0_testInput_write_enable_a = memory_controller_write_enable_a & select_main_0_testInput_a;
	main_0_testInput_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	main_0_testOutput_address_a = memory_controller_address_a [6-1+3:3] & {6{select_main_0_testOutput_a}};
	main_0_testOutput_write_enable_a = memory_controller_write_enable_a & select_main_0_testOutput_a;
	main_0_testOutput_in_a [64-1:0] = memory_controller_in_a[64-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {3{select_mainInput_reg_a[ram_latency]}} | {3{select_mainOutput_reg_a[ram_latency]}} | {3{select_maintestInput_reg_a[ram_latency]}} | {3{select_maintestOutput_reg_a[ram_latency]}} | {3{select_main_0_Input_reg_a[ram_latency]}} | {3{select_main_0_Output_reg_a[ram_latency]}} | {3{select_main_0_testInput_reg_a[ram_latency]}} | {3{select_main_0_testOutput_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_mainInput_out_a | memory_controller_mainOutput_out_a | memory_controller_maintestInput_out_a | memory_controller_maintestOutput_out_a | memory_controller_main_0_Input_out_a | memory_controller_main_0_Output_out_a | memory_controller_main_0_testInput_out_a | memory_controller_main_0_testOutput_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_mainInput_reg_a[j+1] <= select_mainInput_reg_a[j];
select_mainOutput_reg_a[j+1] <= select_mainOutput_reg_a[j];
select_maintestInput_reg_a[j+1] <= select_maintestInput_reg_a[j];
select_maintestOutput_reg_a[j+1] <= select_maintestOutput_reg_a[j];
select_main_0_Input_reg_a[j+1] <= select_main_0_Input_reg_a[j];
select_main_0_Output_reg_a[j+1] <= select_main_0_Output_reg_a[j];
select_main_0_testInput_reg_a[j+1] <= select_main_0_testInput_reg_a[j];
select_main_0_testOutput_reg_a[j+1] <= select_main_0_testOutput_reg_a[j];
end
always @(*)
begin
select_mainInput_reg_a[0] <= select_mainInput_a;
select_mainOutput_reg_a[0] <= select_mainOutput_a;
select_maintestInput_reg_a[0] <= select_maintestInput_a;
select_maintestOutput_reg_a[0] <= select_maintestOutput_a;
select_main_0_Input_reg_a[0] <= select_main_0_Input_a;
select_main_0_Output_reg_a[0] <= select_main_0_Output_a;
select_main_0_testInput_reg_a[0] <= select_main_0_testInput_a;
select_main_0_testOutput_reg_a[0] <= select_main_0_testOutput_a;
end

reg [2:0] select_not_struct_b;

wire select_mainInput_b;
assign select_mainInput_b = (tag_b == `TAG_g_mainInput);
reg [ram_latency:0] select_mainInput_reg_b;
wire [63:0] memory_controller_mainInput_out_b;
assign memory_controller_mainInput_out_b = {64{ select_mainInput_reg_b[ram_latency]}} & mainInput_out_b;

wire select_mainOutput_b;
assign select_mainOutput_b = (tag_b == `TAG_g_mainOutput);
reg [ram_latency:0] select_mainOutput_reg_b;
wire [63:0] memory_controller_mainOutput_out_b;
assign memory_controller_mainOutput_out_b = {64{ select_mainOutput_reg_b[ram_latency]}} & mainOutput_out_b;

wire select_maintestInput_b;
assign select_maintestInput_b = (tag_b == `TAG_g_maintestInput);
reg [ram_latency:0] select_maintestInput_reg_b;
wire [63:0] memory_controller_maintestInput_out_b;
assign memory_controller_maintestInput_out_b = {64{ select_maintestInput_reg_b[ram_latency]}} & maintestInput_out_b;

wire select_maintestOutput_b;
assign select_maintestOutput_b = (tag_b == `TAG_g_maintestOutput);
reg [ram_latency:0] select_maintestOutput_reg_b;
wire [63:0] memory_controller_maintestOutput_out_b;
assign memory_controller_maintestOutput_out_b = {64{ select_maintestOutput_reg_b[ram_latency]}} & maintestOutput_out_b;

wire select_main_0_Input_b;
assign select_main_0_Input_b = (tag_b == `TAG_main_0_Input);
reg [ram_latency:0] select_main_0_Input_reg_b;
wire [63:0] memory_controller_main_0_Input_out_b;
assign memory_controller_main_0_Input_out_b = {64{ select_main_0_Input_reg_b[ram_latency]}} & main_0_Input_out_b;

wire select_main_0_Output_b;
assign select_main_0_Output_b = (tag_b == `TAG_main_0_Output);
reg [ram_latency:0] select_main_0_Output_reg_b;
wire [63:0] memory_controller_main_0_Output_out_b;
assign memory_controller_main_0_Output_out_b = {64{ select_main_0_Output_reg_b[ram_latency]}} & main_0_Output_out_b;

wire select_main_0_testInput_b;
assign select_main_0_testInput_b = (tag_b == `TAG_main_0_testInput);
reg [ram_latency:0] select_main_0_testInput_reg_b;
wire [63:0] memory_controller_main_0_testInput_out_b;
assign memory_controller_main_0_testInput_out_b = {64{ select_main_0_testInput_reg_b[ram_latency]}} & main_0_testInput_out_b;

wire select_main_0_testOutput_b;
assign select_main_0_testOutput_b = (tag_b == `TAG_main_0_testOutput);
reg [ram_latency:0] select_main_0_testOutput_reg_b;
wire [63:0] memory_controller_main_0_testOutput_out_b;
assign memory_controller_main_0_testOutput_out_b = {64{ select_main_0_testOutput_reg_b[ram_latency]}} & main_0_testOutput_out_b;

always @(*)
begin
	mainInput_address_b = memory_controller_address_b [16-1+3:3] & {16{select_mainInput_b}};
	mainInput_write_enable_b = memory_controller_write_enable_b & select_mainInput_b;
	mainInput_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	mainOutput_address_b = memory_controller_address_b [13-1+3:3] & {13{select_mainOutput_b}};
	mainOutput_write_enable_b = memory_controller_write_enable_b & select_mainOutput_b;
	mainOutput_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	maintestInput_address_b = memory_controller_address_b [9-1+3:3] & {9{select_maintestInput_b}};
	maintestInput_write_enable_b = memory_controller_write_enable_b & select_maintestInput_b;
	maintestInput_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	maintestOutput_address_b = memory_controller_address_b [6-1+3:3] & {6{select_maintestOutput_b}};
	maintestOutput_write_enable_b = memory_controller_write_enable_b & select_maintestOutput_b;
	maintestOutput_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	main_0_Input_address_b = memory_controller_address_b [16-1+3:3] & {16{select_main_0_Input_b}};
	main_0_Input_write_enable_b = memory_controller_write_enable_b & select_main_0_Input_b;
	main_0_Input_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	main_0_Output_address_b = memory_controller_address_b [13-1+3:3] & {13{select_main_0_Output_b}};
	main_0_Output_write_enable_b = memory_controller_write_enable_b & select_main_0_Output_b;
	main_0_Output_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	main_0_testInput_address_b = memory_controller_address_b [9-1+3:3] & {9{select_main_0_testInput_b}};
	main_0_testInput_write_enable_b = memory_controller_write_enable_b & select_main_0_testInput_b;
	main_0_testInput_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	main_0_testOutput_address_b = memory_controller_address_b [6-1+3:3] & {6{select_main_0_testOutput_b}};
	main_0_testOutput_write_enable_b = memory_controller_write_enable_b & select_main_0_testOutput_b;
	main_0_testOutput_in_b [64-1:0] = memory_controller_in_b[64-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {3{select_mainInput_reg_b[ram_latency]}} | {3{select_mainOutput_reg_b[ram_latency]}} | {3{select_maintestInput_reg_b[ram_latency]}} | {3{select_maintestOutput_reg_b[ram_latency]}} | {3{select_main_0_Input_reg_b[ram_latency]}} | {3{select_main_0_Output_reg_b[ram_latency]}} | {3{select_main_0_testInput_reg_b[ram_latency]}} | {3{select_main_0_testOutput_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_mainInput_out_b | memory_controller_mainOutput_out_b | memory_controller_maintestInput_out_b | memory_controller_maintestOutput_out_b | memory_controller_main_0_Input_out_b | memory_controller_main_0_Output_out_b | memory_controller_main_0_testInput_out_b | memory_controller_main_0_testOutput_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_mainInput_reg_b[j+1] <= select_mainInput_reg_b[j];
select_mainOutput_reg_b[j+1] <= select_mainOutput_reg_b[j];
select_maintestInput_reg_b[j+1] <= select_maintestInput_reg_b[j];
select_maintestOutput_reg_b[j+1] <= select_maintestOutput_reg_b[j];
select_main_0_Input_reg_b[j+1] <= select_main_0_Input_reg_b[j];
select_main_0_Output_reg_b[j+1] <= select_main_0_Output_reg_b[j];
select_main_0_testInput_reg_b[j+1] <= select_main_0_testInput_reg_b[j];
select_main_0_testOutput_reg_b[j+1] <= select_main_0_testOutput_reg_b[j];
end
always @(*)
begin
select_mainInput_reg_b[0] <= select_mainInput_b;
select_mainOutput_reg_b[0] <= select_mainOutput_b;
select_maintestInput_reg_b[0] <= select_maintestInput_b;
select_maintestOutput_reg_b[0] <= select_maintestOutput_b;
select_main_0_Input_reg_b[0] <= select_main_0_Input_b;
select_main_0_Output_reg_b[0] <= select_main_0_Output_b;
select_main_0_testInput_reg_b[0] <= select_main_0_testInput_b;
select_main_0_testOutput_reg_b[0] <= select_main_0_testOutput_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB__1_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB__2_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB__2_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB__2_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB__2_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_legup_memcpy_8exit_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB__4_8 = 5'd8;
parameter [4:0] LEGUP_F_main_BB__5_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB__5_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB__5_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB__5_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB_legup_memcpy_8exit9_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB__7_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB__8_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB__8_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB__8_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB__8_18 = 5'd18;
parameter [4:0] LEGUP_F_main_BB_legup_memcpy_8exit6_19 = 5'd19;
parameter [4:0] LEGUP_F_main_BB__10_20 = 5'd20;
parameter [4:0] LEGUP_F_main_BB__11_21 = 5'd21;
parameter [4:0] LEGUP_F_main_BB__11_22 = 5'd22;
parameter [4:0] LEGUP_F_main_BB__11_23 = 5'd23;
parameter [4:0] LEGUP_F_main_BB__11_24 = 5'd24;
parameter [4:0] LEGUP_F_main_BB_legup_memcpy_8exit3_25 = 5'd25;
parameter [4:0] LEGUP_F_main_BB_legup_memcpy_8exit3_27 = 5'd27;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_26 = 5'd26;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] main_1_indvar18;
reg [31:0] main_1_indvar18_reg;
reg  main_1_exitcond20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_sti0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_dti0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_dti0_reg;
reg [63:0] main_2_3;
reg [31:0] main_2_indvarnext19;
reg [31:0] main_2_indvarnext19_reg;
reg [31:0] main_4_indvar11;
reg [31:0] main_4_indvar11_reg;
reg  main_4_exitcond13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_sti80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_dti70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_dti70_reg;
reg [63:0] main_5_6;
reg [31:0] main_5_indvarnext12;
reg [31:0] main_5_indvarnext12_reg;
reg [31:0] main_7_indvar4;
reg [31:0] main_7_indvar4_reg;
reg  main_7_exitcond6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_sti50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_dti40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_dti40_reg;
reg [63:0] main_8_9;
reg [31:0] main_8_indvarnext5;
reg [31:0] main_8_indvarnext5_reg;
reg [31:0] main_10_indvar;
reg [31:0] main_10_indvar_reg;
reg  main_10_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_11_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_11_sti20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_11_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_11_dti10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_11_dti10_reg;
reg [63:0] main_11_12;
reg [31:0] main_11_indvarnext;
reg [31:0] main_11_indvarnext_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memcpy_8exit3_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memcpy_8exit3_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memcpy_8exit3_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memcpy_8exit3_16;
reg  neuralNetwork_start;
reg [31:0] neuralNetwork_arg_0;
reg [31:0] neuralNetwork_arg_1;
reg [31:0] neuralNetwork_arg_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] neuralNetwork_arg_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] neuralNetwork_arg_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] neuralNetwork_arg_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] neuralNetwork_arg_6;
reg  neuralNetwork_finish_final;
reg  neuralNetwork_finish_reg;
wire  neuralNetwork_finish;


neuralNetwork neuralNetwork (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (neuralNetwork_start),
	.finish (neuralNetwork_finish),
	.arg_0 (neuralNetwork_arg_0),
	.arg_1 (neuralNetwork_arg_1),
	.arg_2 (neuralNetwork_arg_2),
	.arg_3 (neuralNetwork_arg_3),
	.arg_4 (neuralNetwork_arg_4),
	.arg_5 (neuralNetwork_arg_5),
	.arg_6 (neuralNetwork_arg_6)
);

defparam
	neuralNetwork.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__10_20:
	if ((main_10_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memcpy_8exit3_25;
	else if ((main_10_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__11_21;
LEGUP_F_main_BB__11_21:
		next_state = LEGUP_F_main_BB__11_22;
LEGUP_F_main_BB__11_22:
		next_state = LEGUP_F_main_BB__11_23;
LEGUP_F_main_BB__11_23:
		next_state = LEGUP_F_main_BB__11_24;
LEGUP_F_main_BB__11_24:
		next_state = LEGUP_F_main_BB__10_20;
LEGUP_F_main_BB__1_2:
	if ((main_1_exitcond20 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memcpy_8exit_7;
	else if ((main_1_exitcond20 == 1'd0))
		next_state = LEGUP_F_main_BB__2_3;
LEGUP_F_main_BB__2_3:
		next_state = LEGUP_F_main_BB__2_4;
LEGUP_F_main_BB__2_4:
		next_state = LEGUP_F_main_BB__2_5;
LEGUP_F_main_BB__2_5:
		next_state = LEGUP_F_main_BB__2_6;
LEGUP_F_main_BB__2_6:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__4_8:
	if ((main_4_exitcond13 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memcpy_8exit9_13;
	else if ((main_4_exitcond13 == 1'd0))
		next_state = LEGUP_F_main_BB__5_9;
LEGUP_F_main_BB__5_10:
		next_state = LEGUP_F_main_BB__5_11;
LEGUP_F_main_BB__5_11:
		next_state = LEGUP_F_main_BB__5_12;
LEGUP_F_main_BB__5_12:
		next_state = LEGUP_F_main_BB__4_8;
LEGUP_F_main_BB__5_9:
		next_state = LEGUP_F_main_BB__5_10;
LEGUP_F_main_BB__7_14:
	if ((main_7_exitcond6 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memcpy_8exit6_19;
	else if ((main_7_exitcond6 == 1'd0))
		next_state = LEGUP_F_main_BB__8_15;
LEGUP_F_main_BB__8_15:
		next_state = LEGUP_F_main_BB__8_16;
LEGUP_F_main_BB__8_16:
		next_state = LEGUP_F_main_BB__8_17;
LEGUP_F_main_BB__8_17:
		next_state = LEGUP_F_main_BB__8_18;
LEGUP_F_main_BB__8_18:
		next_state = LEGUP_F_main_BB__7_14;
LEGUP_F_main_BB_legup_memcpy_8exit3_25:
		next_state = LEGUP_function_call_26;
LEGUP_F_main_BB_legup_memcpy_8exit3_27:
		next_state = LEGUP_0;
LEGUP_F_main_BB_legup_memcpy_8exit6_19:
		next_state = LEGUP_F_main_BB__10_20;
LEGUP_F_main_BB_legup_memcpy_8exit9_13:
		next_state = LEGUP_F_main_BB__7_14;
LEGUP_F_main_BB_legup_memcpy_8exit_7:
		next_state = LEGUP_F_main_BB__4_8;
LEGUP_function_call_26:
	if ((neuralNetwork_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memcpy_8exit3_27;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar18 = 32'd0;
	end
	/* main: %1*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar18 = main_2_indvarnext19_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar18_reg <= main_1_indvar18;
		if (start == 1'b0 && ^(main_1_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar18_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar18_reg <= main_1_indvar18;
		if (start == 1'b0 && ^(main_1_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond20 = icmp eq i32 %indvar18, 34880*/
		main_1_exitcond20 = (main_1_indvar18_reg == 32'd34880);
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep23 = getelementptr [34880 x double]* @main.Input, i32 0, i32 %indvar18*/
		main_2_scevgep23 = (`TAG_g_mainInput_a + (8 * main_1_indvar18_reg));
end
always @(*) begin
	/* main: %2*/
	/*   %st.i.0 = bitcast double* %scevgep23 to i64**/
		main_2_sti0 = main_2_scevgep23;
end
always @(*) begin
	/* main: %2*/
	/*   %scevgep21 = getelementptr [34880 x double]* %Input, i32 0, i32 %indvar18*/
		main_2_scevgep21 = (`TAG_main_0_Input_a + (8 * main_1_indvar18_reg));
end
always @(*) begin
	/* main: %2*/
	/*   %dt.i.0 = bitcast double* %scevgep21 to i64**/
		main_2_dti0 = main_2_scevgep21;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %dt.i.0 = bitcast double* %scevgep21 to i64**/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		main_2_dti0_reg <= main_2_dti0;
		if (start == 1'b0 && ^(main_2_dti0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_dti0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %3 = load i64* %st.i.0, align 8*/
		main_2_3 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
		main_2_indvarnext19 = (main_1_indvar18_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		main_2_indvarnext19_reg <= main_2_indvarnext19;
		if (start == 1'b0 && ^(main_2_indvarnext19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %indvar11 = phi i32 [ %indvar.next12, %5 ], [ 0, %legup_memcpy_8.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar11 = 32'd0;
	end
	/* main: %4*/
	/*   %indvar11 = phi i32 [ %indvar.next12, %5 ], [ 0, %legup_memcpy_8.exit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__5_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_4_indvar11 = main_5_indvarnext12_reg;
	end
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %indvar11 = phi i32 [ %indvar.next12, %5 ], [ 0, %legup_memcpy_8.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar11_reg <= main_4_indvar11;
		if (start == 1'b0 && ^(main_4_indvar11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar11_reg"); $finish; end
	end
	/* main: %4*/
	/*   %indvar11 = phi i32 [ %indvar.next12, %5 ], [ 0, %legup_memcpy_8.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__5_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar11_reg <= main_4_indvar11;
		if (start == 1'b0 && ^(main_4_indvar11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %exitcond13 = icmp eq i32 %indvar11, 4360*/
		main_4_exitcond13 = (main_4_indvar11_reg == 32'd4360);
end
always @(*) begin
	/* main: %5*/
	/*   %scevgep16 = getelementptr [4360 x double]* @main.Output, i32 0, i32 %indvar11*/
		main_5_scevgep16 = (`TAG_g_mainOutput_a + (8 * main_4_indvar11_reg));
end
always @(*) begin
	/* main: %5*/
	/*   %st.i8.0 = bitcast double* %scevgep16 to i64**/
		main_5_sti80 = main_5_scevgep16;
end
always @(*) begin
	/* main: %5*/
	/*   %scevgep14 = getelementptr [4360 x double]* %Output, i32 0, i32 %indvar11*/
		main_5_scevgep14 = (`TAG_main_0_Output_a + (8 * main_4_indvar11_reg));
end
always @(*) begin
	/* main: %5*/
	/*   %dt.i7.0 = bitcast double* %scevgep14 to i64**/
		main_5_dti70 = main_5_scevgep14;
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %dt.i7.0 = bitcast double* %scevgep14 to i64**/
	if ((cur_state == LEGUP_F_main_BB__5_9)) begin
		main_5_dti70_reg <= main_5_dti70;
		if (start == 1'b0 && ^(main_5_dti70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_dti70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %6 = load i64* %st.i8.0, align 8*/
		main_5_6 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %5*/
	/*   %indvar.next12 = add i32 %indvar11, 1*/
		main_5_indvarnext12 = (main_4_indvar11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %indvar.next12 = add i32 %indvar11, 1*/
	if ((cur_state == LEGUP_F_main_BB__5_9)) begin
		main_5_indvarnext12_reg <= main_5_indvarnext12;
		if (start == 1'b0 && ^(main_5_indvarnext12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_indvarnext12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %8 ], [ 0, %legup_memcpy_8.exit9 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit9_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_indvar4 = 32'd0;
	end
	/* main: %7*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %8 ], [ 0, %legup_memcpy_8.exit9 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__8_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_7_indvar4 = main_8_indvarnext5_reg;
	end
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %8 ], [ 0, %legup_memcpy_8.exit9 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit9_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_indvar4_reg <= main_7_indvar4;
		if (start == 1'b0 && ^(main_7_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_indvar4_reg"); $finish; end
	end
	/* main: %7*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %8 ], [ 0, %legup_memcpy_8.exit9 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_indvar4_reg <= main_7_indvar4;
		if (start == 1'b0 && ^(main_7_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_indvar4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %exitcond6 = icmp eq i32 %indvar4, 512*/
		main_7_exitcond6 = (main_7_indvar4_reg == 32'd512);
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep9 = getelementptr [512 x double]* @main.testInput, i32 0, i32 %indvar4*/
		main_8_scevgep9 = (`TAG_g_maintestInput_a + (8 * main_7_indvar4_reg));
end
always @(*) begin
	/* main: %8*/
	/*   %st.i5.0 = bitcast double* %scevgep9 to i64**/
		main_8_sti50 = main_8_scevgep9;
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep7 = getelementptr [512 x double]* %testInput, i32 0, i32 %indvar4*/
		main_8_scevgep7 = (`TAG_main_0_testInput_a + (8 * main_7_indvar4_reg));
end
always @(*) begin
	/* main: %8*/
	/*   %dt.i4.0 = bitcast double* %scevgep7 to i64**/
		main_8_dti40 = main_8_scevgep7;
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %dt.i4.0 = bitcast double* %scevgep7 to i64**/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		main_8_dti40_reg <= main_8_dti40;
		if (start == 1'b0 && ^(main_8_dti40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_dti40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %9 = load i64* %st.i5.0, align 8*/
		main_8_9 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %8*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
		main_8_indvarnext5 = (main_7_indvar4_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		main_8_indvarnext5_reg <= main_8_indvarnext5;
		if (start == 1'b0 && ^(main_8_indvarnext5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_indvarnext5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %indvar = phi i32 [ %indvar.next, %11 ], [ 0, %legup_memcpy_8.exit6 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit6_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_10_indvar = 32'd0;
	end
	/* main: %10*/
	/*   %indvar = phi i32 [ %indvar.next, %11 ], [ 0, %legup_memcpy_8.exit6 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__11_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_10_indvar = main_11_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %indvar = phi i32 [ %indvar.next, %11 ], [ 0, %legup_memcpy_8.exit6 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit6_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_10_indvar_reg <= main_10_indvar;
		if (start == 1'b0 && ^(main_10_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_indvar_reg"); $finish; end
	end
	/* main: %10*/
	/*   %indvar = phi i32 [ %indvar.next, %11 ], [ 0, %legup_memcpy_8.exit6 ]*/
	if (((cur_state == LEGUP_F_main_BB__11_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_10_indvar_reg <= main_10_indvar;
		if (start == 1'b0 && ^(main_10_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %exitcond = icmp eq i32 %indvar, 64*/
		main_10_exitcond = (main_10_indvar_reg == 32'd64);
end
always @(*) begin
	/* main: %11*/
	/*   %scevgep2 = getelementptr [64 x double]* @main.testOutput, i32 0, i32 %indvar*/
		main_11_scevgep2 = (`TAG_g_maintestOutput_a + (8 * main_10_indvar_reg));
end
always @(*) begin
	/* main: %11*/
	/*   %st.i2.0 = bitcast double* %scevgep2 to i64**/
		main_11_sti20 = main_11_scevgep2;
end
always @(*) begin
	/* main: %11*/
	/*   %scevgep = getelementptr [64 x double]* %testOutput, i32 0, i32 %indvar*/
		main_11_scevgep = (`TAG_main_0_testOutput_a + (8 * main_10_indvar_reg));
end
always @(*) begin
	/* main: %11*/
	/*   %dt.i1.0 = bitcast double* %scevgep to i64**/
		main_11_dti10 = main_11_scevgep;
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %dt.i1.0 = bitcast double* %scevgep to i64**/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		main_11_dti10_reg <= main_11_dti10;
		if (start == 1'b0 && ^(main_11_dti10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_dti10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %11*/
	/*   %12 = load i64* %st.i2.0, align 8*/
		main_11_12 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %11*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_11_indvarnext = (main_10_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		main_11_indvarnext_reg <= main_11_indvarnext;
		if (start == 1'b0 && ^(main_11_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   %13 = getelementptr inbounds [34880 x double]* %Input, i32 0, i32 0*/
if (reset) begin main_legup_memcpy_8exit3_13 = 0; end
		main_legup_memcpy_8exit3_13 = `TAG_main_0_Input_a;
end
always @(*) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   %14 = getelementptr inbounds [4360 x double]* %Output, i32 0, i32 0*/
if (reset) begin main_legup_memcpy_8exit3_14 = 0; end
		main_legup_memcpy_8exit3_14 = `TAG_main_0_Output_a;
end
always @(*) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   %15 = getelementptr inbounds [512 x double]* %testInput, i32 0, i32 0*/
if (reset) begin main_legup_memcpy_8exit3_15 = 0; end
		main_legup_memcpy_8exit3_15 = `TAG_main_0_testInput_a;
end
always @(*) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   %16 = getelementptr inbounds [64 x double]* %testOutput, i32 0, i32 0*/
if (reset) begin main_legup_memcpy_8exit3_16 = 0; end
		main_legup_memcpy_8exit3_16 = `TAG_main_0_testOutput_a;
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_26)) begin
		neuralNetwork_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_arg_0 <= 32'd4360;
		if (start == 1'b0 && ^(32'd4360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_arg_0"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_arg_1 <= 32'd8;
		if (start == 1'b0 && ^(32'd8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_arg_1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_arg_2 <= 32'd2;
		if (start == 1'b0 && ^(32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_arg_2"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_arg_3 <= main_legup_memcpy_8exit3_13;
		if (start == 1'b0 && ^(main_legup_memcpy_8exit3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_arg_3"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_arg_4 <= main_legup_memcpy_8exit3_14;
		if (start == 1'b0 && ^(main_legup_memcpy_8exit3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_arg_4"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_arg_5 <= main_legup_memcpy_8exit3_15;
		if (start == 1'b0 && ^(main_legup_memcpy_8exit3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_arg_5"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %legup_memcpy_8.exit3*/
	/*   call void @neuralNetwork(i32 4360, i32 8, i32 2, double* %13, double* %14, double* %15, double* %16) #2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25)) begin
		neuralNetwork_arg_6 <= main_legup_memcpy_8exit3_16;
		if (start == 1'b0 && ^(main_legup_memcpy_8exit3_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_arg_6"); $finish; end
	end
end
always @(*) begin
	neuralNetwork_finish_final = neuralNetwork_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_25))) begin
		neuralNetwork_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_finish_reg"); $finish; end
	end
	if (neuralNetwork_finish) begin
		neuralNetwork_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to neuralNetwork_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %legup_memcpy_8.exit3*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_27)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %3 = load i64* %st.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i64 %3, i64* %dt.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %6 = load i64* %st.i8.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i64 %6, i64* %dt.i7.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   %9 = load i64* %st.i5.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   store i64 %9, i64* %dt.i4.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %11*/
	/*   %12 = load i64* %st.i2.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %11*/
	/*   store i64 %12, i64* %dt.i1.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_23)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %2*/
	/*   %3 = load i64* %st.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_address_a = main_2_sti0;
	end
	/* main: %2*/
	/*   store i64 %3, i64* %dt.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		memory_controller_address_a = main_2_dti0_reg;
	end
	/* main: %5*/
	/*   %6 = load i64* %st.i8.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_9)) begin
		memory_controller_address_a = main_5_sti80;
	end
	/* main: %5*/
	/*   store i64 %6, i64* %dt.i7.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_address_a = main_5_dti70_reg;
	end
	/* main: %8*/
	/*   %9 = load i64* %st.i5.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		memory_controller_address_a = main_8_sti50;
	end
	/* main: %8*/
	/*   store i64 %9, i64* %dt.i4.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_address_a = main_8_dti40_reg;
	end
	/* main: %11*/
	/*   %12 = load i64* %st.i2.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		memory_controller_address_a = main_11_sti20;
	end
	/* main: %11*/
	/*   store i64 %12, i64* %dt.i1.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_23)) begin
		memory_controller_address_a = main_11_dti10_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   %3 = load i64* %st.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %2*/
	/*   store i64 %3, i64* %dt.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %6 = load i64* %st.i8.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   store i64 %6, i64* %dt.i7.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   %9 = load i64* %st.i5.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %8*/
	/*   store i64 %9, i64* %dt.i4.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %11*/
	/*   %12 = load i64* %st.i2.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %11*/
	/*   store i64 %12, i64* %dt.i1.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %2*/
	/*   store i64 %3, i64* %dt.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		memory_controller_in_a = main_2_3;
	end
	/* main: %5*/
	/*   store i64 %6, i64* %dt.i7.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_in_a = main_5_6;
	end
	/* main: %8*/
	/*   store i64 %9, i64* %dt.i4.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_in_a = main_8_9;
	end
	/* main: %11*/
	/*   store i64 %12, i64* %dt.i1.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_23)) begin
		memory_controller_in_a = main_11_12;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %2*/
	/*   %3 = load i64* %st.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_3)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %2*/
	/*   store i64 %3, i64* %dt.i.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__2_5)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %5*/
	/*   %6 = load i64* %st.i8.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_9)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %5*/
	/*   store i64 %6, i64* %dt.i7.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %8*/
	/*   %9 = load i64* %st.i5.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %8*/
	/*   store i64 %9, i64* %dt.i4.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %11*/
	/*   %12 = load i64* %st.i2.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %11*/
	/*   store i64 %12, i64* %dt.i1.0, align 8*/
	if ((cur_state == LEGUP_F_main_BB__11_23)) begin
		memory_controller_size_a = 2'd3;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %legup_memcpy_8.exit3*/
	/*   ret i32 0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memcpy_8exit3_27)) begin
		return_val <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
